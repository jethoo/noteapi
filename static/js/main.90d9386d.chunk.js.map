{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","axios","get","then","response","data","newObject","post","id","put","Footer","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCK3BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKJ,UAAU,QAAf,SACGI,K,gBCPDC,EAAU,aAwBD,EAtBA,WASb,OARgBC,IAAMC,IAAIF,GAQXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCd5BK,EAPA,WAEb,OACC,uGC0FYC,EAzFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEGnB,MAAK,SAAAoB,GACJT,EAASS,QAEZ,IAEH,IAyCMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAlC,GAAI,OAAIA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAASoB,IACvB,8BACE,yBAAQtB,QAAS,kBAAMqB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYE,KAAI,SAACnC,EAAMoC,GAAP,OACf,cAAC,EAAD,CAEEpC,KAAMA,EACNC,iBAAkB,kBA1CD,SAACgB,GACjB,sCAAkCA,GAA3C,IACMjB,EAAOsB,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAErB,KAAOA,KAChCsB,EAAW,2BAAQvC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD4B,EACUd,EAAIsB,GACX3B,MAAK,SAAA4B,GACJjB,EAASD,EAAMa,KAAI,SAAAnC,GAAI,OAAIA,EAAKiB,KAAOA,EAAKjB,EAAOwC,SAEpDC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJ7B,EAAKK,QADD,sCAGfsC,YAAW,WACTd,EAAgB,QACf,QA0ByBe,CAAmB5C,EAAKiB,MAF3CmB,QAMX,uBAAMS,SA/DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB3C,QAASmB,EACTyB,MAAM,IAAIC,MAAOC,cACjBhD,UAAWiD,KAAKC,SAAW,GAC3BpC,GAAIK,EAAMgC,OAAS,GAGrBvB,EACUiB,GACPpC,MAAK,SAAA4B,GACJjB,EAASD,EAAMiC,OAAOf,IACtBf,EAAW,QAkDb,UACE,uBACE+B,MAAOhC,EACPiC,SA7BiB,SAACX,GACxBrB,EAAWqB,EAAMY,OAAOF,UA8BpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCxCNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.90d9386d.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification\n","import axios from 'axios'\n//const baseUrl = 'http://localhost:3001/api/notes'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  /*const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))*/\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React from 'react'\n\nconst Footer = () => {\n \n  return (\n   <p>Note app, Department of Computer Science, University of Helsinki 2019</p>\n  )\n}\n\nexport default Footer\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\nimport Footer from './components/Footer'\n\nconst App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n  \n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const toggleImportanceOf = (id) => {\n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)   \n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>      \n      <ul>\n        {notesToShow.map((note, i) => \n          <Note\n            key={i}\n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />   \n    </div>\n  )\n}\n\nexport default App ","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n/*const Hello = ({ name, age}) => {\n  \n  const bornYear = () => new Date().getFullYear() - age  \n  return (\n    <div>\n       <p>Hello {name}, you are {age} years old</p>\n       <p>So you were probably born in {bornYear()}</p>\n    </div>\n  );\n}\n\nconst Display = ({ counter }) => <div>{counter}</div>\n\nconst Button = ( props ) => {\n  return (\n    <button onClick={props.handleClick}>\n      {props.text}\n    </button>\n  )\n}\n\nconst History = (props) => {\n  if(props.allClicks.length === 0){\n    return (\n      <div>\n        the app is used by pressing the buttons\n      </div>\n    )\n  }\n  \n  return (\n    <div>\n      button press history: {props.allClicks.join(' ')}\n    </div>\n  )\n}\n\nconst hello = (who) => {\n    const handler = () => {\n      console.log('hello world', who)\n    }\n  return handler\n}\n*/\n\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}